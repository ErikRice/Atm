{"version":3,"sources":["Atm.js","reportWebVitals.js","index.js"],"names":["Atm","onChange","isDeposit","validTransaction","console","log","isValid","className","Number","id","type","width","value","disabled","Account","useState","deposit","setDeposit","totalState","setTotalState","setIsDeposit","atmMode","setAtmMode","setValidTransaction","status","onSubmit","event","preventDefault","e","target","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAIMA,EAAM,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,iBAElCC,QAAQC,IAAR,yBAA8BH,IAC9B,IAAMI,EAAUH,EAEhB,OADAC,QAAQC,IAAI,SAAUC,GAEpB,wBAAOC,UAAU,mBAAjB,UACE,qBAAIA,UAAU,cAAd,cANW,CAAC,UAAW,aAMcC,QAAQN,OAC7C,uBAAOO,GAAG,eAAeC,KAAK,SAASC,MAAM,MAAMV,SAAUA,IAC7D,uBAAOS,KAAK,SAASC,MAAM,MAAMC,MAAM,SAASH,GAAG,eAAeI,UAAWP,QA8DpEQ,EAzDC,WACd,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOb,EAAP,KAAkBkB,EAAlB,KACA,EAA8BL,mBAAS,IAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAgDP,oBAAS,GAAzD,mBAAOZ,EAAP,KAAyBoB,EAAzB,KAEIC,EAAM,4BAAwBN,EAAxB,KACVd,QAAQC,IAAR,2CAAgDH,IAgChD,OACE,uBAAMuB,SAlBa,SAACC,GAEpBP,EADejB,EAAYgB,EAAaF,EAAUE,EAAaF,GAE/DU,EAAMC,kBAeN,UACE,oBAAIlB,GAAG,QAAQF,UAAU,gBAAzB,SAA0CiB,IAC1C,uBAAOjB,UAAU,SAAjB,gDACA,uBACA,yBAAQA,UAAU,kBAAkBN,SAAU,SAAC2B,GAAD,OAhBxBF,EAgB+CE,EAfvExB,QAAQC,IAAIqB,EAAMG,OAAOjB,YACE,YAAvBc,EAAMG,OAAOjB,OACfQ,GAAa,GACbE,EAAW,YACqB,cAAvBI,EAAMG,OAAOjB,OACtBQ,GAAa,GACbE,EAAW,cACLA,EAAW,KARI,IAACI,GAgBmDI,KAAK,OAAOrB,GAAG,cAAxF,UACA,wBAAQA,GAAG,eAAeG,MAAM,KAChC,wBAAQH,GAAG,oBAAoBG,MAAM,UAArC,qBACA,wBAAQH,GAAG,qBAAqBG,MAAM,YAAtC,0BAGAS,GAAW,cAAC,EAAD,CAAKpB,SAzCC,SAACyB,GAEpB,GADAtB,QAAQC,IAAR,uBAA4BqB,EAAMG,OAAOjB,QACrCJ,OAAOkB,EAAMG,OAAOjB,QAAU,EAGhC,OAFAW,GAAoB,QACpBnB,QAAQC,IAAI,aAAcF,GAGZ,cAAZkB,GAA2Bb,OAAOkB,EAAMG,OAAOjB,OAASM,EAC1DK,GAAoB,GACdA,GAAoB,GAC5BN,EAAWT,OAAOkB,EAAMG,OAAOjB,SA+BWV,UAAWA,EAAWC,iBAAkBA,QCzDvE4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1afe6333.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\nconst Atm = ({ onChange, isDeposit, validTransaction }) => {\n  const choice = ['Deposit', 'Cash Back'];\n  console.log(`ATM isDeposit: ${isDeposit}`);\n  const isValid = validTransaction;\n  console.log(\"valid:\", isValid);\n  return (\n    <label className=\"transaction-type\">\n      <h3 className=\"transaction\"> {choice[Number(!isDeposit)]}</h3>\n      <input id=\"number-input\" type=\"number\" width=\"200\" onChange={onChange}></input>\n      <input type=\"submit\" width=\"200\" value=\"Submit\" id=\"submit-input\" disabled={!isValid}></input>\n    </label>\n  );\n};\n\nconst Account = () => {\n  const [deposit, setDeposit] = useState(0);\n  const [totalState, setTotalState] = useState(0);\n  const [isDeposit, setIsDeposit] = useState(true);\n  const [atmMode, setAtmMode] = useState(\"\");\n  const [validTransaction, setValidTransaction] = useState(false);\n\n  let status = `Account Balance $ ${totalState} `;\n  console.log(`Account Rendered with isDeposit: ${isDeposit}`);\n  \n  const handleChange = (event) => {\n    console.log(`handleChange ${event.target.value}`);\n    if (Number(event.target.value) <= 0) {\n      setValidTransaction(false);\n      console.log(\"condition:\", validTransaction);\n      return;\n    }\n    if (atmMode === \"Cash Back\" && Number(event.target.value) > totalState) {\n      setValidTransaction(false);\n    } else  setValidTransaction(true);\n    setDeposit(Number(event.target.value));\n  };\n  \n  const handleSubmit = (event) => {\n    let newTotal = isDeposit ? totalState + deposit : totalState - deposit;\n    setTotalState(newTotal);\n    event.preventDefault();\n  };\n\n  const handleModeSelect = (event) => {\n    console.log(event.target.value);\n    if (event.target.value === \"Deposit\") {\n      setIsDeposit(true);\n      setAtmMode(\"Deposit\");\n    } else if (event.target.value === \"Cash Back\") {\n      setIsDeposit(false);\n      setAtmMode(\"Cash Back\");\n    } else {setAtmMode(\"\")}\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 id=\"total\" className=\"account-total\">{status}</h2>\n      <label className=\"prompt\">Select an action below to continue</label>\n      <br></br>\n      <select className=\"dropdown-select\" onChange={(e)=> handleModeSelect(e)} name=\"mode\" id=\"mode-select\">\n      <option id=\"no-selection\" value=\"\"></option>\n      <option id=\"deposit-selection\" value=\"Deposit\">Deposit</option>\n      <option id=\"cashback-selection\" value=\"Cash Back\">Cash Back</option>\n      </select>\n      {\n      atmMode && <Atm onChange={handleChange} isDeposit={isDeposit} validTransaction={validTransaction}></Atm>\n      }\n    </form>\n  );\n};\n\nexport default Account;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Account from './Atm';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Account/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}